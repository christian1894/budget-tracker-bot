 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/money_transactions", type: :request do
  before do
  end
  
  describe "GET /index" do
    it "renders a successful response" do
      create(:money_transaction)
      get money_transactions_url
      expect(response).to be_successful
    end
  end
  
  describe "GET /show" do
    it "renders a successful response" do
      money_transaction = create(:money_transaction)
      get money_transaction_url(money_transaction)
      expect(response).to be_successful
    end
  end
  
  describe "GET /new" do
    it "renders a successful response" do
      get new_money_transaction_url
      expect(response).to be_successful
    end
  end
  
  describe "GET /edit" do
    it "render a successful response" do
      money_transaction = create(:money_transaction)
      get edit_money_transaction_url(money_transaction)
      expect(response).to be_successful
    end
  end
  
  describe "POST /create" do
    let!(:transaction_category) { create(:transaction_category) } 

    context "with valid parameters" do
      let(:valid_attributes) {
        {
          amount: 100,
          description: "Some Description",
          transaction_category_id: transaction_category.id

        }
      }

      it "creates a new MoneyTransaction" do
        expect {
          post money_transactions_url, params: { money_transaction: valid_attributes }
        }.to change(MoneyTransaction, :count).by(1)
      end
      
      it "redirects to the created money_transaction" do
        post money_transactions_url, params: { money_transaction: valid_attributes }
        expect(response).to redirect_to(money_transaction_url(MoneyTransaction.last))
      end
    end
    
    context "with invalid parameters" do
      let(:invalid_attributes) {
        {
          amount: 100,
          description: "Some Description",
          transaction_category_id: transaction_category.id + 1
        }
      }
      it "does not create a new MoneyTransaction" do
        expect {
          post money_transactions_url, params: { money_transaction: invalid_attributes }
        }.to change(MoneyTransaction, :count).by(0)
      end
      
      it "renders a successful response (i.e. to display the 'new' template)" do
        post money_transactions_url, params: { money_transaction: invalid_attributes }
        expect(response.status).to eq(422)
        assert_template 'money_transactions/new'
      end
    end
  end
  
  describe "PATCH /update" do
    let!(:transaction_category) { create(:transaction_category) } 
    let!(:new_transaction_category) { create(:transaction_category) } 
    
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }
      let(:valid_attributes) {
        {
          amount: 100,
          description: "Some Description",
          transaction_category_id: transaction_category.id
          
        }
      }
      let(:new_attributes) {
        {
          amount: 200,
          description: "Some New Description",
          transaction_category_id: new_transaction_category.id
          
        }
      }
      
      it "updates the requested money_transaction" do
        money_transaction = MoneyTransaction.create! valid_attributes
        patch money_transaction_url(money_transaction), params: { money_transaction: new_attributes }
        money_transaction.reload
        new_attributes.keys.each do |attribute|
          expect(money_transaction[attribute]).to eq(new_attributes[attribute])
        end
      end
      
      it "redirects to the money_transaction" do
        money_transaction = MoneyTransaction.create! valid_attributes
        patch money_transaction_url(money_transaction), params: { money_transaction: new_attributes }
        money_transaction.reload
        expect(response).to redirect_to(money_transaction_url(money_transaction))
      end
    end
    
    context "with invalid parameters" do
      let(:valid_attributes) {
        {
          amount: 100,
          description: "Some Description",
          transaction_category_id: transaction_category.id
          
        }
      }
      let(:invalid_attributes) {
        {
          amount: 100,
          description: "Some Description",
          transaction_category_id: transaction_category.id - 1
        }
      }
      it "renders a successful response (i.e. to display the 'edit' template)" do
        money_transaction = MoneyTransaction.create! valid_attributes
        patch money_transaction_url(money_transaction), params: { money_transaction: invalid_attributes }
        expect(response.status).to eq(422)
        assert_template 'money_transactions/edit'
      end
    end
  end
  
  describe "DELETE /destroy" do
    let!(:transaction_category) { create(:transaction_category) } 
    let(:valid_attributes) {
      {
        amount: 100,
        description: "Some Description",
        transaction_category_id: transaction_category.id
        
      }
    }
    it "destroys the requested money_transaction" do
      money_transaction = MoneyTransaction.create! valid_attributes
      expect {
        delete money_transaction_url(money_transaction)
      }.to change(MoneyTransaction, :count).by(-1)
    end
    
    it "redirects to the money_transactions list" do
      money_transaction = MoneyTransaction.create! valid_attributes
      delete money_transaction_url(money_transaction)
      expect(response).to redirect_to(money_transactions_url)
    end
  end
end
